(function($) { $.fn.mtDialog.open( ScriptURI + '?' + '__mode=dialog_select_weblog&multi=1');
var i = $('#mt-dialog-iframe').get(0);
function wait() {
  var c = i.contentWindow ? i.contentWindow : null;
  if ( c && c.Dialog && c.Dialog.Simple) {
	c.Dialog.Simple.prototype.close = function() {
	  var html = '';
	  html += '<?xml version="1.0" encoding="UTF-8"?>%' + '0A<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">%' + '0A<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">%' + '0A<head profile="http://selenium-ide.openqa.org/profiles/test-case">%' + '0A<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />%' + '0A<link rel="selenium.base" href="" />%' + '0A<title>Update template</title>%' + '0A</head>%' + '0A<body><table cellpadding="1" cellspacing="1" border="1"><thead><tr><td rowspan="1" colspan="3">update_theme</td></tr></thead><tbody>';
	  c.jQuery('input:checked').each(function() {
		html += '<tr><td>open</td><td>' + document.location.protocol + '//' + document.location.host + ScriptURI + '?__mode=list_template&amp;blog_id=' + this.value + '</td><td></td></tr><tr><td>click</td><td>link=Refresh Templates</td><td></td></tr><tr><td>waitForText</td><td>//html[@id="dialog"]//div[@id="content-header"]</td><td>Refresh Templates</td></tr><tr><td>click</td><td>backup</td><td></td></tr><tr><td>click</td><td>refresh_type_clean</td><td></td></tr><tr><td>click</td><td>//button[@type="submit"]</td><td></td></tr><tr><td>clickAndWait</td><td>//button[@type="button"]</td><td></td></tr>';
	  });
	  html += '</tbody></table><p style="display:none">';

	  window.selenium_test_suite = {
		'title': 'Update template',
		'cases': [
		  {
			'title': 'Update template',
			'test': html
		  }
		]
	  };

	  html = '';

	  window.open('data:text/html;base64,' + html);
	  $.fn.mtDialog.close();
	  return false;
	};
  }
  else {
	setTimeout(wait, 1000);
  }
}

setTimeout(wait, 1000);
})(jQuery);
